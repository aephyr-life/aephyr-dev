set shell := ["bash", "-euo", "pipefail", "-c"]

# ──────────────────────────────────────────────────────────────────────────────
db_host     := env('AEPHYR_DB_HOST', 'localhost')
db_port     := env('AEPHYR_DB_PORT', '54329')
db_name     := env('AEPHYR_DB_NAME', 'aephyr')
db_super    := env('AEPHYR_DB_SUPER', 'postgres')

pg_dir      := '.pg'
pg_data_dir := pg_dir + '/data'
pg_log      := pg_dir + '/postgres.log'

flyway_url  := "jdbc:postgresql://" + db_host + ":"  + db_port + "/" + db_name
flyway_user := 'aephyr_migrator'

app_db_url  := flyway_url
app_db_user := 'aephyr_app'

projector_db_url  := flyway_url
projector_db_user := 'aephyr_projector'

# ──────────────────────────────────────────────────────────────────────────────
[private]
default:
    @just --list

# misc development tools ───────────────────────────────────────────────────────
# creates an .env file for environment variables
[group('dev')]
[confirm("This overwrites any existing '.env' file. Are you sure?")]
dev-env:
    #!/usr/bin/env bash
    set -euo pipefail

    env_file='.env.test'
    echo "Generating $env_file"

    gen_key() {
        echo `openssl rand -base64 32 | tr '+/' '-_' | tr -d '='`
    }

    echo "# .env file generated by just"                             > $env_file
    echo ""                                                         >> $env_file

    echo "# Flyway migrations"                                      >> $env_file
    echo "FLYWAY_URL={{flyway_url}}"                                >> $env_file
    echo "FLYWAY_USER={{flyway_user}}"                              >> $env_file
    echo "FLYWAY_PASSWORD=$(gen_key)"                               >> $env_file
    echo ""                                                         >> $env_file

    echo "# App database"                                           >> $env_file
    echo "AEPHYR_APP_DB_URL={{app_db_url}}"                         >> $env_file
    echo "AEPHYR_APP_DB_USER={{app_db_user}}"                       >> $env_file
    echo "AEPHYR_APP_DB_PASSWORD=$(gen_key)"                        >> $env_file
    echo ""                                                         >> $env_file

    echo "# Projector database"                                     >> $env_file
    echo "AEPHYR_PROJECTOR_DB_URL={{projector_db_url}}"             >> $env_file
    echo "AEPHYR_PROJECTOR_DB_USER={{projector_db_user}}"           >> $env_file
    echo "AEPHYR_PROJECTOR_DB_PASSWORD=$(gen_key)"                  >> $env_file
    echo ""                                                         >> $env_file

    echo "# magic link configuration"                               >> $env_file
    echo "AEPHYR_MAGICLINK_HMAC_SECRET_B64URL=$(gen_key)"           >> $env_file

# builds the program
[group('dev')]
build:
  sbt compile

# cleans the build
[group('dev')]
clean:
  sbt clean

# runs the tests
[group('dev')]
test:
  sbt test

# starts the api server
[group('dev')]
api-run:
  sbt api-server/run

# opens a repl
[group('dev')]
repl:
  sbt console

# migrates the db
[group('dev')]
migrate:
  sbt db-migrations/run

# formats the code
[group('dev')]
fmt:
  sbt scalafmtAll

# updates flake.lock
[group('dev')]
update-lock:
  nix flake update

# devShell neu laden
[group('dev')]
reload:
  direnv reload

# generates a 32-Byte Base64URL-Key without padding
[group('dev')]
gen-key:
  openssl rand -base64 32 | tr '+/' '-_' | tr -d '='

# checks dependencies
[group('dev')]
dependencies:
  sbt ";undeclaredCompileDependencies;unusedCompileDependencies"

# initializes the db
[group('db')]
[confirm("This initializes a new database. Are you sure?")]
db-init:
    @mkdir -p {{pg_dir}}
    @initdb -D {{pg_data_dir}} -U {{db_super}}
    @awk '{print} END {print "host all all 127.0.0.1/32 trust"; print "host all all ::1/128 trust"}' {{pg_data_dir}}/pg_hba.conf > {{pg_data_dir}}/pg_hba.conf.new
    @mv {{pg_data_dir}}/pg_hba.conf.new {{pg_data_dir}}/pg_hba.conf
    @pg_ctl -D {{pg_data_dir}} -l {{pg_log}} -o "-p {{db_port}} -c listen_addresses={{db_host}}" start
    @sleep 1
    @createdb -h {{db_host}} -p {{db_port}} -U {{db_super}} {{db_name}} || true

# start the db
[group('db')]
db-start:
  @pg_ctl -D {{pg_data_dir}} -l {{pg_log}} -o "-p {{db_port}} -c listen_addresses={{db_host}}" start
  @sleep 1
  @echo "Postgres on postgres://{{db_host}}:{{db_port}}/{{db_name}} (log: {{pg_log}})"

# stop the db
[group('db')]
db-stop:
    pg_ctl -D {{pg_data_dir}} stop -m fast

# view db logs
[group('db')]
db-logs:
    tail -f {{pg_log}}

# bootstrap roles for hardening (run once after start)
[group('db')]
db-bootstrap:
    #!/usr/bin/env bash
    set -euo pipefail

    create_user() {
      ROLE=$1
      PASSWORD=$2
      echo " - $ROLE"
      psql -h {{db_host}} -p {{db_port}} -U {{db_super}} -d {{db_name}} \
           -v ON_ERROR_STOP=1 \
           -c "CREATE ROLE $ROLE LOGIN PASSWORD '$PASSWORD';" \
           2> /dev/null \
           || true
    }

    echo "Creating roles"
    create_user $FLYWAY_USER $FLYWAY_PASSWORD
    create_user $AEPHYR_APP_DB_USER $AEPHYR_APP_DB_PASSWORD
    create_user $AEPHYR_PROJECTOR_DB_USER $AEPHYR_PROJECTOR_DB_PASSWORD
    echo ""
    echo "Running bootstrap script (schemas, grants etc.)"
    psql -h {{db_host}} -p {{db_port}} -U {{db_super}} -d {{db_name}} \
         -v ON_ERROR_STOP=1 \
         -f modules/db-migrations/src/main/resources/db/seed/bootstrap.sql

# psql console
[group('db')]
psql:
  psql -h {{db_host}} -p {{db_port}} -U {{db_super}} -d {{db_name}}

# db seed
[group('db')]
db-seed:
  psql -h {{db_host}} -p {{db_port}} -U {{flyway_user}} -d {{db_name}} \
       -v ON_ERROR_STOP=1 \
       -f modules/db-migrations/src/main/resources/db/seed/dev_users.sql

# creates a new branch
[group('dev')]
branch:
    @echo "Select branch type:"
    @PS3="> "; select prefix in feature fix chore test refactor docs; do \
        if [[ -n "$prefix" ]]; then \
            read -r -p "Enter branch name (kebab-case): " name; \
            git switch -c "$prefix/$name"; \
            git push -f -u origin "$prefix/$name"; \
            break; \
        else \
            echo "Invalid choice"; \
        fi \
    done

# creates a draft pull request
[group('dev')]
draft-pr:
    @gh pr create --fill --base main --draft
