-- boostrap.sql — RUN ONCE AS SUPERUSER (POSTGRES)

-- ── SCHEMAS
CREATE SCHEMA IF NOT EXISTS auth;
CREATE SCHEMA IF NOT EXISTS tech;
CREATE SCHEMA IF NOT EXISTS audit;
CREATE SCHEMA IF NOT EXISTS read;
CREATE SCHEMA IF NOT EXISTS event;

-- ── EXTENSIONS (INSTALL INTO TECH, NOT PUBLIC)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'pgcrypto') THEN
    -- ENSURE EXTENSION ENDS UP IN TECH
    EXECUTE 'ALTER EXTENSION pgcrypto SET SCHEMA tech';
  ELSE
    -- FRESH INSTALL DIRECTLY INTO TECH
    EXECUTE 'CREATE EXTENSION pgcrypto WITH SCHEMA tech';
  END IF;
END
$$;

-- ── ROLES
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'aephyr_migrator') THEN
    CREATE ROLE aephyr_migrator LOGIN;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'aephyr_app') THEN
    CREATE ROLE aephyr_app LOGIN;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'aephyr_projector') THEN
    CREATE ROLE aephyr_projector LOGIN;
  END IF;
END
$$;

-- ── USAGE ON SCHEMAS
GRANT USAGE ON SCHEMA auth, tech, audit, read, event
  TO aephyr_app, aephyr_projector, aephyr_migrator;

-- ── DDL PRIVILEGES FOR MIGRATOR
GRANT CREATE, USAGE ON SCHEMA auth  TO aephyr_migrator;
GRANT CREATE, USAGE ON SCHEMA tech  TO aephyr_migrator;
GRANT CREATE, USAGE ON SCHEMA audit TO aephyr_migrator;
GRANT CREATE, USAGE ON SCHEMA read  TO aephyr_migrator;
GRANT CREATE, USAGE ON SCHEMA event TO aephyr_migrator;

-- ── RUNTIME PRIVILEGES
-- APP
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA auth  TO aephyr_app;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA tech  TO aephyr_app;
GRANT INSERT                                 ON ALL TABLES IN SCHEMA audit TO aephyr_app;
GRANT SELECT                                 ON ALL TABLES IN SCHEMA read  TO aephyr_app;
REVOKE ALL ON ALL TABLES IN SCHEMA event FROM aephyr_app;

-- PROJECTOR
GRANT SELECT ON ALL TABLES IN SCHEMA auth  TO aephyr_projector;
GRANT SELECT ON ALL TABLES IN SCHEMA read  TO aephyr_projector;
GRANT SELECT ON ALL TABLES IN SCHEMA event TO aephyr_projector;

-- ── DEFAULT PRIVILEGES FOR FUTURE OBJECTS (MIGRATOR CREATES THEM)
ALTER DEFAULT PRIVILEGES IN SCHEMA auth
  GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO aephyr_app;
ALTER DEFAULT PRIVILEGES IN SCHEMA tech
  GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO aephyr_app;
ALTER DEFAULT PRIVILEGES IN SCHEMA audit
  GRANT INSERT ON TABLES TO aephyr_app;
ALTER DEFAULT PRIVILEGES IN SCHEMA read
  GRANT SELECT ON TABLES TO aephyr_app, aephyr_projector;

-- PROJECTOR DEFAULTS
ALTER DEFAULT PRIVILEGES IN SCHEMA auth
  GRANT SELECT ON TABLES TO aephyr_projector;
ALTER DEFAULT PRIVILEGES IN SCHEMA read
  GRANT SELECT ON TABLES TO aephyr_projector;
ALTER DEFAULT PRIVILEGES IN SCHEMA event
  GRANT SELECT ON TABLES TO aephyr_projector;

-- APP SHOULD NOT SEE EVENT.* BY DEFAULT
ALTER DEFAULT PRIVILEGES IN SCHEMA event
  REVOKE ALL ON TABLES FROM aephyr_app;

-- MIGRATOR CONVENIENCE (OWNS/ALTER ON CREATED OBJECTS)
ALTER DEFAULT PRIVILEGES IN SCHEMA auth
  GRANT ALL ON TABLES TO aephyr_migrator;
ALTER DEFAULT PRIVILEGES IN SCHEMA tech
  GRANT ALL ON TABLES TO aephyr_migrator;
ALTER DEFAULT PRIVILEGES IN SCHEMA audit
  GRANT ALL ON TABLES TO aephyr_migrator;
ALTER DEFAULT PRIVILEGES IN SCHEMA read
  GRANT ALL ON TABLES TO aephyr_migrator;
ALTER DEFAULT PRIVILEGES IN SCHEMA event
  GRANT ALL ON TABLES TO aephyr_migrator;

-- ── HARDENING
ALTER ROLE aephyr_app       SET search_path = '';
ALTER ROLE aephyr_projector SET search_path = '';
REVOKE ALL ON SCHEMA public FROM public;
