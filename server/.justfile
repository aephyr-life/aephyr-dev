set shell := ["bash", "-euo", "pipefail", "-c"]

# read from direnv/flake shell if present, otherwise fall back
db_host     := env('PGHOST',     'localhost')
db_port     := env('PGPORT',     '54329')
db_name     := env('PGDATABASE', 'aephyr')
db_super    := env('PGUSER',     'postgres')
db_url      := "postgresql://" + db_host + ":"  + db_port + "/" + db_name

# new layout under server/.dev/pg
pg_dir      := '.dev/pg'
pg_data_dir := pg_dir + '/data'
pg_log      := pg_dir + '/postgres.log'

flyway_url  := "jdbc:" + db_url
flyway_user := 'aephyr_migrator'

app_db_url  := flyway_url
app_db_user := 'aephyr_app'

projector_db_url  := flyway_url
projector_db_user := 'aephyr_projector'

# ──────────────────────────────────────────────────────────────────────────────
[private]
default:
    @just --list

# misc development tools ───────────────────────────────────────────────────────
# Create .envrc.local with local env + secrets
[group('dev')]
[confirm("This overwrites any existing '.envrc.local' file. Are you sure?")]
dev-env:
    #!/usr/bin/env bash
    set -euo pipefail

    env_file='.envrc.local'
    echo "Generating $env_file"

    gen_key() {
        echo `openssl rand -base64 32 | tr '+/' '-_' | tr -d '='`
    }

    echo "# $env_file file generated by just"                        > $env_file
    echo ""                                                         >> $env_file

    echo "# Core DB URL"                                            >> $env_file
    echo "export DATABASE_URL={{db_url}}"                           >> $env_file
    echo ""                                                         >> $env_file

    echo "# Flyway migrations"                                      >> $env_file
    echo "export FLYWAY_URL={{flyway_url}}"                         >> $env_file
    echo "export FLYWAY_USER={{flyway_user}}"                       >> $env_file
    echo "export FLYWAY_PASSWORD=$(gen_key)"                        >> $env_file
    echo ""                                                         >> $env_file

    echo "# App database"                                           >> $env_file
    echo "export AEPHYR_APP_DB_PASSWORD=$(gen_key)"                 >> $env_file
    echo ""                                                         >> $env_file

    echo "# Projector database"                                     >> $env_file
    echo "export AEPHYR_PROJECTOR_DB_URL={{projector_db_url}}"      >> $env_file
    echo "export AEPHYR_PROJECTOR_DB_USER={{projector_db_user}}"    >> $env_file
    echo "export AEPHYR_PROJECTOR_DB_PASSWORD=$(gen_key)"           >> $env_file
    echo ""                                                         >> $env_file

# builds the program
[group('dev')]
build:
  sbtn compile

# cleans the build
[group('dev')]
clean:
  sbtn clean

# runs the tests
[group('dev')]
test:
  sbtn test

# starts the web server
[group('dev')]
run:
  sbtn web-server/run

# opens a repl
[group('dev')]
repl:
  sbtn console

# migrates the db
[group('dev')]
migrate:
  sbtn db-migrations/run

# formats the code
[group('dev')]
fmt:
  sbtn "scalafmtAll; scalafmtSbt; scalafixAll"

# lints the code
[group('dev')]
lint:
    sbtn "scalafmtCheckAll; scalafixAll --check"

# updates flake.lock
[group('dev')]
update-lock:
  nix flake update

# devShell neu laden
[group('dev')]
reload:
  direnv reload

# generates a 32-Byte Base64URL-Key without padding
[group('dev')]
gen-key:
  openssl rand -base64 32 | tr '+/' '-_' | tr -d '='

# checks dependencies
[group('dev')]
dependencies:
  sbt ";undeclaredCompileDependencies;unusedCompileDependencies"

# initializes the db
[group('db')]
[confirm("This initializes a new database under .dev/pg. Are you sure?")]
db-init:
	@mkdir -p {{pg_dir}}
	@initdb -D {{pg_data_dir}} -U {{db_super}}
	# allow local trust (dev only)
	@awk '{print} END {print "host all all 127.0.0.1/32 trust"; print "host all all ::1/128 trust"}' {{pg_data_dir}}/pg_hba.conf > {{pg_data_dir}}/pg_hba.conf.new
	@mv {{pg_data_dir}}/pg_hba.conf.new {{pg_data_dir}}/pg_hba.conf
	@pg_ctl -D {{pg_data_dir}} -l {{pg_log}} -o "-p {{db_port}} -c listen_addresses={{db_host}}" start
	@sleep 1
	@createdb -h {{db_host}} -p {{db_port}} -U {{db_super}} {{db_name}} || true

# start/stop/logs
[group('db')]
db-start:
	@pg_ctl -D {{pg_data_dir}} -l {{pg_log}} -o "-p {{db_port}} -c listen_addresses={{db_host}}" start
	@sleep 1
	@echo "Postgres on postgres://{{db_host}}:{{db_port}}/{{db_name}} (log: {{pg_log}})"

[group('db')]
db-stop:
	pg_ctl -D {{pg_data_dir}} stop -m fast

[group('db')]
db-logs:
	tail -f {{pg_log}}

# bootstrap roles for hardening (run once after start)
[group('db')]
db-bootstrap:
	#!/usr/bin/env bash
	set -euo pipefail

	need () { [ -n "$${!1:-}" ] || { echo "ERROR: $$1 is not set (export it in server/.envrc.local)"; exit 1; }; }

	# Required variables (direnv should export these from .envrc.local)
	need FLYWAY_USER
	need FLYWAY_PASSWORD
	need AEPHYR_APP_DB_USER
	need AEPHYR_APP_DB_PASSWORD
	need AEPHYR_PROJECTOR_DB_USER
	need AEPHYR_PROJECTOR_DB_PASSWORD

	echo "Creating roles (idempotent)…"

	create_user () {
	  local role="$$1" pw="$$2"
	  echo " - $$role"
	  psql -h {{db_host}} -p {{db_port}} -U {{db_super}} -d {{db_name}} \
	       -v ON_ERROR_STOP=1 \
	       -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='$$role') THEN CREATE ROLE $$role LOGIN PASSWORD '$$pw'; END IF; END \$\$;"
	}

	create_user "$$FLYWAY_USER"               "$$FLYWAY_PASSWORD"
	create_user "$$AEPHYR_APP_DB_USER"        "$$AEPHYR_APP_DB_PASSWORD"
	create_user "$$AEPHYR_PROJECTOR_DB_USER"  "$$AEPHYR_PROJECTOR_DB_PASSWORD"

	echo "Applying bootstrap SQL (schemas, grants)…"
	psql -h {{db_host}} -p {{db_port}} -U {{db_super}} -d {{db_name}} \
	     -v ON_ERROR_STOP=1 \
	     -f modules/db-migrations/src/main/resources/db/seed/bootstrap.sql

	echo "Bootstrap complete."
# psql console
[group('db')]
psql user:
  psql -h {{db_host}} -p {{db_port}} -U {{user}} -d {{db_name}}

# db seed
[group('db')]
db-seed:
  psql -h {{db_host}} -p {{db_port}} -U {{flyway_user}} -d {{db_name}} \
       -v ON_ERROR_STOP=1 \
       -f modules/db-migrations/src/main/resources/db/seed/dev_users.sql

# creates a new branch
[group('dev')]
branch:
    @echo "Select branch type:"
    @PS3="> "; select prefix in feature fix chore test refactor docs; do \
        if [[ -n "$prefix" ]]; then \
            read -r -p "Enter branch name (kebab-case): " name; \
            git switch -c "$prefix/$name"; \
            git push -f -u origin "$prefix/$name"; \
            break; \
        else \
            echo "Invalid choice"; \
        fi \
    done

# creates a draft pull request
[group('dev')]
draft-pr:
    @gh pr create --fill --base main --draft
